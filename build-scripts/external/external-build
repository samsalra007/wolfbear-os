#!/bin/sh
set -euo pipefail

# Variables
EXTERNAL_BUILD_SCRIPTS="$BUILD_SCRIPTS_PATH/external"
EXTERNAL_PATH="$WOLFBEAR_OS_PROJECT_PATH/external"

# 1) Mostrar rutas
echo "[1] external=$EXTERNAL_PATH, overlay=$OVERLAY_PATH"

# 2) Desmontar y limpiar
for fs in proc sys dev; do
  mountpoint -q "$EXTERNAL_PATH/$fs" && sudo umount -l "$EXTERNAL_PATH/$fs"
done
sudo rm -rf "$EXTERNAL_PATH"
mkdir -p "$EXTERNAL_PATH"

# 3) Sincronizar overlay
echo "[2] Sync overlay"
rsync -a --links "$OVERLAY_PATH/" "$EXTERNAL_PATH/"

# 4) Preparar directorios
echo "[3] Prepare dirs"
mkdir -p "$EXTERNAL_PATH/tmp"
mkdir -p "$EXTERNAL_PATH/sbin"
mkdir -p "$EXTERNAL_PATH/lib/apk/db"
mkdir -p "$EXTERNAL_PATH/var/lib/apk/db"
mkdir -p "$EXTERNAL_PATH/etc/apk"
mkdir -p "$EXTERNAL_PATH/etc/ssl/certs"
mkdir -p "$EXTERNAL_PATH/usr/lib"

# 5) Asegurar /dev/null
echo "[4] Ensure /dev/null"
[ -c /dev/null ] || { sudo rm -f /dev/null; sudo mknod -m666 /dev/null c 1 3; }

# 6) Build de la imagen
echo "[5] Building Docker image"
cd "$EXTERNAL_BUILD_SCRIPTS"
docker build -f Dockerfile -t apk-extract:latest .

# 7) Ejecutar contenedor para extraer contenidos
echo "[6] Running Docker container to extract apk"
docker run --rm -v "$EXTERNAL_PATH":/real-target apk-extract:latest

# 8) Verificar extracción de apk
echo "[7] Verify extraction"
if [ ! -f "$EXTERNAL_PATH/sbin/apk" ]; then
  echo "ERROR: No se encontró apk en $EXTERNAL_PATH/sbin/apk"
  ls -R "$EXTERNAL_PATH"
  exit 1
else
  ls -l "$EXTERNAL_PATH/sbin/apk"
fi

# 9) Preparar chroot
echo "[8] Setup chroot"
sudo cp /etc/resolv.conf "$EXTERNAL_PATH/etc/resolv.conf"
for fs in proc sys dev; do
  sudo mkdir -p "$EXTERNAL_PATH/$fs"
  sudo mount --bind "/$fs" "$EXTERNAL_PATH/$fs"
done

# 10) Actualizar repositorios en chroot
echo "[9] Chroot and update"

sudo chroot "$EXTERNAL_PATH" /sbin/apk update
sudo rsync -a --links "$EXTERNAL_PATH" "$ROOTFS_PATH"

#!/bin/bash

echo "[STEP BEGIN] pkg-external-dependencies-alpine-docker"
sleep 1

echo "  External path found: "${PKG_EXTERNAL_PATH}
sleep 1


docker run --rm --platform=linux/arm64 --security-opt apparmor=unconfined -v "$PKG_EXTERNAL_PATH":/target alpine:latest sh -euxc '
  apk add --no-cache \
    build-base \
    sdl2-dev \
    mesa-dev \
    libdrm-dev \
    wayland-dev \
    expat-dev \
    libffi-dev \
    musl-dev \
    file rsync \
    kmod

  # Limpia y crea estructura
  rm -rf /target/usr/include /target/usr/lib /target/lib
  mkdir -p /target/usr/include /target/usr/lib /target/lib /target/usr/bin /target/usr/share/misc

  # Headers
  rsync -a /usr/include/ /target/usr/include/

  # SOLO estáticas (.a)
  find /usr/lib -type f -name "*.a" -exec rsync -a {} /target/usr/lib/ \;

  # loader musl
  cp /lib/libc.musl-*.so.1 /target/lib/

  # Tools
  rsync -a /usr/bin/file /target/usr/bin/

  # magic
  cp -a /usr/share/misc/magic.mgc /target/usr/share/misc/

  chmod -R u+rwX /target

  # Copia los binarios de kmod (lsmod, modprobe, etc) y sus dependencias compartidas
  mkdir -p /target/bin
  mkdir -p /target/sbin

  rsync -a /bin/kmod /target/bin/
  rsync -a /sbin/lsmod /target/sbin/
  rsync -a /sbin/modprobe /target/sbin/
  rsync -a /sbin/insmod /target/sbin/
  rsync -a /sbin/rmmod /target/sbin/
  rsync -a /sbin/depmod /target/sbin/

  ldd /sbin/lsmod | awk '{print $3}' | grep -E '^/' | while read lib; do rsync -a "$lib" /target/usr/lib/; done

'


# Activar según la GPU, Por el momento no se activa, y hay que añadir mesa-vulkan en las dependencias
# ICDs (implementaciones de Vulkan para hardware específico, ej: mesa)
# cp -a /usr/lib/libvulkan_intel.so* /target/usr/lib/ 2>/dev/null || true
# cp -a /usr/lib/libvulkan_radeon.so* /target/usr/lib/ 2>/dev/null || true
# cp -a /usr/lib/libvulkan_lvp.so* /target/usr/lib/ 2>/dev/null || true
# cp -a /usr/lib/libvulkan_swrast.so* /target/usr/lib/ 2>/dev/null || true

echo "[STEP END] pkg-external-dependencies-alpine-docker"
sleep 1

#!/bin/bash

echo "Welcome to wolfbearOS development build script"

WOLFBEAR_OS_PROJECT_PATH=$(pwd)

BUILD_SCRIPTS_PATH=$WOLFBEAR_OS_PROJECT_PATH/build-scripts
CONFIG_FILES_PATH=$WOLFBEAR_OS_PROJECT_PATH/config
DEPENDENCIES_PATH=$WOLFBEAR_OS_PROJECT_PATH/dependencies
PATCHES_PATH=$WOLFBEAR_OS_PROJECT_PATH/patches
TARGET_PATH=$WOLFBEAR_OS_PROJECT_PATH/target
PKG_EXTERNAL_PATH=$WOLFBEAR_OS_PROJECT_PATH/pkg-external

LINUX_KERNEL_VERSION=6.1
LINUX_KERNEL_PATH=$DEPENDENCIES_PATH/linux

BUSY_BOX_VERSION=1.37.0
BUSY_BOX_PATH=$DEPENDENCIES_PATH/busybox

OVERLAY_PATH=$WOLFBEAR_OS_PROJECT_PATH/overlay
ROOTFS_PATH=$WOLFBEAR_OS_PROJECT_PATH/rootfs

BUILD_ARCH=arm64
BUILD_CROSS_COMPILE=aarch64-linux-gnu-


WOLFBEAR_APPS_PATH=$OVERLAY_PATH/apps
mkdir -p $DEPENDENCIES_PATH

rm -rf $TARGET_PATH
mkdir $TARGET_PATH

echo "- Removing old ./rootfs"
sleep 2
sudo rm -rf $ROOTFS_PATH
mkdir $ROOTFS_PATH



# Base linux and busybox (includes patches)
echo "- Linux kernel setup"
sleep 2
cd $BUILD_SCRIPTS_PATH
source ./linux-kernel-setup

echo "- Linux busybox setup"
sleep 2
cd $BUILD_SCRIPTS_PATH
source ./linux-busybox-setup



# Generating rootfs with basic linux kernel
echo "- Wolfbear ./overlay to ./rootfs sync"
sleep 2
cd $BUILD_SCRIPTS_PATH
source ./wolfbear-overlay-to-rootfs



# External Libraries Build
sudo rm -rf $PKG_EXTERNAL_PATH
mkdir $PKG_EXTERNAL_PATH

echo "- Using Alpine docker image to install dependencies"
sleep 2
source ./pkg-external-alpine-docker



# APP built-in compilation
echo "- Compiling built-in apps"
cd $BUILD_SCRIPTS_PATH
sleep 2
source ./app-hello-world



# Everyhing generated in external goes to rootfs
echo "- Wolfbear ./pkg-external to ./rootfs sync"
sleep 2
cd $BUILD_SCRIPTS_PATH
source ./wolfbear-pkg-external-to-rootfs



# Final Packaging
echo "- Wolfbear rootfs package"
sleep 2
cd $BUILD_SCRIPTS_PATH
source ./wolfbear-rootfs-package

echo "WolfbearOS compilation is done!"
sleep 0.5

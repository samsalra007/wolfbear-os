#!/bin/sh
set -euo pipefail
source $SCRIPTS_DIR/util-log

SCRIPT_NAME=$0

log_message $SCRIPT_NAME "Generando imagen de disco '$INITRAMFS_DIR'"

IMG=generated.img
SIZE_MB=1024
LOOPDEV=""
MNT_DIR=/mnt/disk

debug_message $SCRIPT_NAME "Eliminando imagen previa si existe"
umount -l "$MNT_DIR/EFI_SYSTEM_PARTITION" || true
umount -l "$MNT_DIR/ROOTFS_FILESYSTEM_PARTITION" || true
umount -l "$MNT_DIR/RESOURCES" || true

rm -f "$TARGET_DIR/$IMG"

debug_message $SCRIPT_NAME "Creando imagen de $SIZE_MB MiB"
dd if=/dev/zero of="$IMG" bs=1M count=$SIZE_MB

debug_message $SCRIPT_NAME "Asociando imagen a loop device"
LOOPDEV=$( losetup -f)
losetup "$LOOPDEV" "$IMG"

debug_message $SCRIPT_NAME "Creando tabla GPT y particiones"
parted --script "$LOOPDEV" \
  mklabel gpt \
  mkpart ESP fat32 1MiB 100MiB \
  set 1 esp on \
  mkpart primary ext4 100MiB 200MiB \
  mkpart primary ext4 200MiB 100%

debug_message $SCRIPT_NAME "Recargando particiones en $LOOPDEV"
partprobe "$LOOPDEV"

debug_message $SCRIPT_NAME "Reasociando loop device para detectar particiones"
losetup -d "$LOOPDEV"
LOOPDEV=$( losetup --find --show "$IMG" )
sleep 1

debug_message $SCRIPT_NAME "Detectando particiones..."
partx -a "$LOOPDEV"
EFI_PART="${LOOPDEV}p1"
ROOT_PART="${LOOPDEV}p2"
RESOURCES_PART="${LOOPDEV}p3"

debug_message $SCRIPT_NAME "Formateando partición EFI ($EFI_PART) como FAT32"
mkfs.vfat -F 32 "$EFI_PART"

debug_message $SCRIPT_NAME "Formateando partición ROOT ($ROOT_PART) como ext4"
mkfs.ext4 "$ROOT_PART"

debug_message $SCRIPT_NAME "Formateando partición RESOURCES ($RESOURCES_PART) como ext4"
mkfs.ext4 "$RESOURCES_PART"

debug_message $SCRIPT_NAME "Montando particiones en /mnt/disk..."
EFI_BOOTDIR="$MNT_DIR/EFI_SYSTEM_PARTITION/EFI/BOOT"
EFI_SYSTEM_PARTITION="$MNT_DIR/EFI_SYSTEM_PARTITION"

ROOTFS_SYSTEM_PARTITION="$MNT_DIR/ROOTFS_FILESYSTEM_PARTITION"
ROOTFS_BOOTDIR="$MNT_DIR/ROOTFS_FILESYSTEM_PARTITION/boot"

RESOURCES_PART_DIR="$MNT_DIR/RESOURCES"

mkdir -p "$EFI_SYSTEM_PARTITION"
mount "$EFI_PART" "$EFI_SYSTEM_PARTITION"
mkdir -p "$EFI_BOOTDIR"

mkdir -p "$ROOTFS_SYSTEM_PARTITION"
mount "$ROOT_PART" "$ROOTFS_SYSTEM_PARTITION"
mkdir -p "$ROOTFS_BOOTDIR"

mkdir -p "$RESOURCES_PART_DIR"
mount "$RESOURCES_PART" "$RESOURCES_PART_DIR"

debug_message $SCRIPT_NAME "Generando contenido para GRUB EFI System Partition"

if [ "$SYS_ARCH" = "arm64" ]; then
    GRUB_TARGET="arm64-efi"
    GRUB_EFI_NAME="BOOTAA64.EFI"
    CONSOLE_DEVICE="ttyAMA0"
    IMAGE_NAME="Image"
elif [ "$SYS_ARCH" = "amd64" ]; then
    GRUB_TARGET="x86_64-efi"
    GRUB_EFI_NAME="BOOTX64.EFI"
    CONSOLE_DEVICE="ttyS0"
    IMAGE_NAME="bzImage"
else
    echo "Arquitectura no soportada: $SYS_ARCH"
    exit 1
fi

debug_message $SCRIPT_NAME "Generando imagen EFI GRUB para $GRUB_TARGET"

grub-mkimage \
  -O "$GRUB_TARGET" \
  -p "/EFI/BOOT" \
  -o "$EFI_BOOTDIR/$GRUB_EFI_NAME" \
  part_gpt fat ext2 normal configfile linux cpio gfxterm all_video

debug_message $SCRIPT_NAME "Generando archivo grub.cfg en '$EFI_BOOTDIR'"
cat > "$EFI_BOOTDIR/grub.cfg" <<EOF
set timeout=0
set default=0

menuentry "WolfbearOS ($SYS_ARCH)" {
    linux (hd0,gpt2)/boot/$IMAGE_NAME console=$CONSOLE_DEVICE root=/dev/ram0 rw
    initrd (hd0,gpt2)/boot/initramfs.cpio.xz
}
EOF

debug_message $SCRIPT_NAME "Generando archivo startup.nsh en '$EFI_BOOTDIR'"
cat > "$EFI_BOOTDIR/startup.nsh" <<EOF
fs0:\\EFI\\BOOT\\$GRUB_EFI_NAME
EOF

debug_message $SCRIPT_NAME "Generando contenido para ROOT Filesystem Partition"
mkdir -p "$ROOTFS_BOOTDIR"
cp $TARGET_DIR/$IMAGE_NAME $ROOTFS_BOOTDIR
cp $TARGET_DIR/initramfs.cpio.xz $ROOTFS_BOOTDIR

debug_message $SCRIPT_NAME "Generando directorios en '$RESOURCES_PART_DIR'"
mkdir -p "$RESOURCES_PART_DIR/rootfs-overlay"
mkdir -p "$RESOURCES_PART_DIR/modules-modprobe"
mkdir -p "$RESOURCES_PART_DIR/busybox-compiled"
mkdir -p "$RESOURCES_PART_DIR/linux-kernel"
mkdir -p "$RESOURCES_PART_DIR/sys-apps"

new_line

echo "rootfs-overlay    $OVERLAY_ROOTFS_DIR"
echo "busybox-compiled  $DEPENDENCY_BUSYBOX_COMPILED_DIR"
echo "modules-modprobe  $DEPENDENCIES_LINUX_MODULES_DIR"
echo "sys-apps          $OVERLAY_SYSAPPS_DIR"

new_line

debug_message $SCRIPT_NAME "Sincronizando directorios hacia imagen de disco"
rsync -a --links "$OVERLAY_ROOTFS_DIR/" "$RESOURCES_PART_DIR/rootfs-overlay/"
rsync -a --links "$DEPENDENCIES_LINUX_MODULES_DIR/" "$RESOURCES_PART_DIR/modules-modprobe/"
rsync -a --links "$DEPENDENCY_BUSYBOX_COMPILED_DIR/" "$RESOURCES_PART_DIR/busybox-compiled/"
rsync -a --links "$OVERLAY_SYSAPPS_DIR/" "$RESOURCES_PART_DIR/sys-apps/"

debug_message $SCRIPT_NAME "Copiando 'Image' e 'initramfs.cpio.xz' en el directorio linux-kernel desde '$TARGET_DIR' hasta '$RESOURCES_PART_DIR'"
cp $TARGET_DIR/$IMAGE_NAME "$RESOURCES_PART_DIR/linux-kernel"
cp $TARGET_DIR/initramfs.cpio.xz "$RESOURCES_PART_DIR/linux-kernel"

debug_message $SCRIPT_NAME "Desmontando particiones"
umount -l "$MNT_DIR/EFI_SYSTEM_PARTITION" || true
umount -l "$MNT_DIR/ROOTFS_FILESYSTEM_PARTITION" || true
umount -l "$MNT_DIR/RESOURCES" || true

debug_message $SCRIPT_NAME "Moviendo '$IMG' hacia '$TARGET_DIR'"
mv $IMG $TARGET_DIR

chown wolfbear:wolfbear $TARGET_DIR/$IMG

log_message $SCRIPT_NAME "Imagen '$IMG' creada y preparada para boot EFI usando EFI stub loader"

#!/bin/sh

set -euo pipefail

IMG=generated.img
SIZE_MB=256
LOOPDEV=""
MNT_DIR=/mnt/disk
TARGET_PATH=$1

# Limpiar imagen previa
echo "Eliminando imagen previa si existe..."
umount -l "$MNT_DIR/EFI_SYSTEM_PARTITION" || true
umount -l "$MNT_DIR/ROOTFS_FILESYSTEM_PARTITION" || true
rm -f "$TARGET_PATH/$IMG"

# Crear imagen vacía
echo "Creando imagen de $SIZE_MB MiB..."
dd if=/dev/zero of="$IMG" bs=1M count=$SIZE_MB

# Asociar imagen a loop device
echo "Asociando imagen a loop device..."
LOOPDEV=$(losetup -f)
losetup "$LOOPDEV" "$IMG"

# Crear tabla GPT y particiones
echo "Creando tabla GPT y particiones..."
parted --script "$LOOPDEV" \
  mklabel gpt \
  mkpart ESP fat32 1MiB 100MiB \
  set 1 esp on \
  mkpart primary ext4 100MiB 100%

# Recargar particiones
echo "Recargando particiones..."
partprobe "$LOOPDEV"

# Reasociar loop device con particiones
echo "Reasociando loop device para detectar particiones..."
losetup -d "$LOOPDEV"
LOOPDEV=$(losetup --find --show "$IMG")
sleep 1

# Determinar dispositivos de partición
echo "Detectando particiones..."
partx -a "$LOOPDEV"
EFI_PART="${LOOPDEV}p1"
ROOT_PART="${LOOPDEV}p2"

# Formatear particiones
echo "Formateando partición EFI ($EFI_PART) como FAT32..."
mkfs.vfat -F 32 "$EFI_PART"

echo "Formateando partición root ($ROOT_PART) como ext4..."
mkfs.ext4 "$ROOT_PART"

# Montar particiones
echo "Montando particiones en /mnt/disk..."
EFI_BOOTDIR="$MNT_DIR/EFI_SYSTEM_PARTITION/EFI/BOOT"
EFI_SYSTEM_PARTITION="$MNT_DIR/EFI_SYSTEM_PARTITION"

ROOTFS_SYSTEM_PARTITION="$MNT_DIR/ROOTFS_FILESYSTEM_PARTITION"
ROOTFS_BOOTDIR="$MNT_DIR/ROOTFS_FILESYSTEM_PARTITION/boot"

mkdir -p "$EFI_SYSTEM_PARTITION"
mount "$EFI_PART" "$EFI_SYSTEM_PARTITION"
mkdir -p "$EFI_BOOTDIR"

mkdir -p "$ROOTFS_SYSTEM_PARTITION"
mount "$ROOT_PART" "$ROOTFS_SYSTEM_PARTITION"
mkdir -p "$ROOTFS_BOOTDIR"

# Generando contenido EFI_SYSTEM_PARTITION (boot)
echo "Generando contenido para EFI System Partition"

grub-mkimage \
  -O arm64-efi \
  -p "/EFI/BOOT" \
  -o $EFI_BOOTDIR/BOOTAA64.EFI \
    part_gpt fat ext2 normal configfile linux cpio gfxterm all_video

cat > $EFI_BOOTDIR/grub.cfg <<EOF
set timeout=0
set default=0

menuentry "WolfbearOS for ARM64" {
    linux (hd0,gpt2)/boot/Image console=ttyAMA0 root=/dev/ram0 rw
    initrd (hd0,gpt2)/boot/initramfs.cpio.xz
}
EOF

cat > $EFI_BOOTDIR/startup.nsh <<EOF
fs0:\EFI\BOOT\BOOTAA64.EFI
EOF

# Generando contenido para rootfs
echo "Generando contenido para ROOT Filesystem Partition"
mkdir -p "$ROOTFS_BOOTDIR"
cp $TARGET_PATH/Image $ROOTFS_BOOTDIR
cp $TARGET_PATH/initramfs.cpio.xz $ROOTFS_BOOTDIR

# Finalizar
echo "Sincronizando y desmontando..."
umount -l "$MNT_DIR/EFI_SYSTEM_PARTITION" || true
umount -l "$MNT_DIR/ROOTFS_FILESYSTEM_PARTITION" || true

echo "Moving out $IMG to ./target path"
mv $IMG $TARGET_PATH

echo "Imagen '$IMG' creada y preparada para boot EFI usando EFI stub loader."
